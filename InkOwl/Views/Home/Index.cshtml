@model List<Nest>
@{
    ViewData["Title"] = "Home Page";
}

<form method="post" action="/nest/new">
    <div class="mx-auto text-center">
        <button type="submit" class="new-nest mx-auto text-center">New Nest +</button>
    </div>
</form>
<br />
<br />
<div class="text-center" style="position:relative">

    @if (Model.Count == 0)
    {
        <h1>You have no Nests</h1>
    }
    else
    {
        @for (var i = 0; i < Model.Count; i++)
        {
            var nest = Model[i];
            <div>
                <div style="display:inline-flex">
                    <div class="wrapper">
                        <a class="sixth before after link-to-nest" href="/nest/@nest.Id">@nest.Title</a>
                    </div>


                    <button class="btn btn-open" data-modal-id="@i">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16">
                            <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />
                        </svg>
                    </button>
                </div>

                <section class="modal hidden" id="modal-@i">
                    <div class="flex">
                        <button class="btn-close">⨉</button>
                    </div>
                    <div>
                        <form method="post" action="/nest/edit/@nest.Id">
                            <label for="Title">DocumentTitle:</label>
                            <input type="text" id="Title" name="Title" value="@nest.Title" maxlength="90">
                            <button type="submit" class="btn">Rename</button>
                        </form>
                       
                        <form method="post" action="/nest/delete/@nest.Id">
                            <button type="submit" class="redbtn">Delete</button>
                        </form>
                    </div>

                </section>
                <div class="overlay hidden"></div>
            </div>
        }
    }
</div>
<style>
    .new-nest {
        background: #fff;
        color: #2F97C1;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 3px #ccc;
        transition: transform 100ms;
        margin-left: 10px;
        margin-top: 10px;
    }

        .new-nest:hover {
            transform: translateY(1px);
            box-shadow: 0 2px #ccc;
        }

/*all link styles*/

    .wrapper {
        margin-top: 10px;
    }

    .link-to-nest{

    }

        .link-to-nest, .link-to-nest:visited, .link-to-nest:hover, .link-to-nest:active {
        -webkit-backface-visibility: hidden;
        backface-visibility: hidden;
        position: relative;
        transition: 0.5s color ease;
        text-decoration: none;
        font-family: Impact;
        color: black;
        font-size: 2.5em;
    }

            .link-to-nest:hover {
            color: #FFD685;
        }

            .link-to-nest.before:before, .link-to-nest.after:after {
            content: "";
            transition: 0.5s all ease;
            -webkit-backface-visibility: hidden;
            backface-visibility: hidden;
            position: absolute;
        }


            .link-to-nest.after:after {
            bottom: -0.25em;
        }

            .link-to-nest.before:before, .link-to-nest.after:after {
            height: 5px;
            height: 0.35rem;
            width: 0;
            background: #FFD685;
        }

            .link-to-nest.third:after, .link-to-nest.sixth:before, .link-to-nest.sixth:after {
            left: 50%;
            -webkit-transform: translateX(-50%);
            transform: translateX(-50%);
        }



            .link-to-nest.before:hover:before, .link-to-nest.after:hover:after {
            width: 100%;
        }

       
</style>

<style>

    .modal {
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: 0.4rem;
        width: 450px;
        padding: 1.3rem;
        min-height: 250px;
        max-height: 250px;
        position: fixed;
        z-index: 2;
        /*top: 20%;*/
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 15px;
        text-align: center;
    }

        .modal .flex {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .modal input {
            padding: 0.7rem 1rem;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 0.9em;
        }

        .modal p {
            font-size: 0.9rem;
            color: #777;
            margin: 0.4rem 0 0.2rem;
        }

    button {
        cursor: pointer;
        border: none;
        font-weight: 600;
    }

    .btn {
        display: inline-block;
        padding: 0.8rem 1.4rem;
        font-weight: 700;
        background-color: #5D6098;
        color: white;
        border-radius: 5px;
        text-align: center;
        font-size: 1em;
    }


    .redbtn {
        display: inline-block;
        padding: 0.8rem 1.4rem;
        font-weight: 700;
        background-color: #880D1E;
        color: white;
        border-radius: 5px;
        text-align: center;
        font-size: 1em;
    }

    .btn-close {
        transform: translate(10px, -20px);
        padding: 0.5rem 0.7rem;
        background: #eee;
        border-radius: 50%;
    }

    .overlay {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(3px);
        z-index: 1;
    }

    .hidden {
        display: none;
    }
</style>



<script>
    document.addEventListener("DOMContentLoaded", function () {
        const openModalBtns = document.querySelectorAll(".btn-open");
        const modals = document.querySelectorAll(".modal");
        const overlay = document.querySelector(".overlay");
        const closeModalBtn = document.querySelector(".btn-close");

        // Open modal function
        const openModal = function (modalId) {
            const modal = document.getElementById("modal-" + modalId);
            modal.classList.remove("hidden");
            overlay.classList.remove("hidden");

        };

        // Close modal function
        const closeModal = function (modalId) {
            const modal = document.getElementById("modal-" + modalId);
            modal.classList.add("hidden");
            overlay.classList.add("hidden");
        };

        // close the modal when the close button and overlay is clicked
        closeModalBtn.addEventListener("click", closeModal);
        overlay.addEventListener("click", closeModal);

        // close modal when the Esc key is pressed
        document.addEventListener("keydown", function (e) {
            if (e.key === "Escape" && !modal.classList.contains("hidden")) {
                closeModal();
            }
        });


        // Add event listeners to open and close each modal
        openModalBtns.forEach((btn, index) => {
            btn.addEventListener("click", () => openModal(index));
        });

        modals.forEach((modal, index) => {
            modal.querySelector(".btn-close").addEventListener("click", () => closeModal(index));
            overlay.addEventListener("click", closeModal);

        });
    });
</script>
