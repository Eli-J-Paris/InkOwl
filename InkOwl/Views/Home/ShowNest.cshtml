@model Nest
@{
    var activeArticle = ViewBag.activeArticle;
    var activeNote = ViewBag.activeNote;
    if (activeArticle == null) activeArticle = 0;
    if (activeNote == null) activeNote = 0;
}
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<link rel="stylesheet" href="/css/ChatBotStyle.css" />
<link rel="stylesheet" href="/css/ShowNestStyles.css" />



<form method="post" action="/nest/update/@Model.Id/@Model.Articles[activeArticle].Id/@Model.Notes[activeNote].Id" id="autoSaveForm">
    <input type="hidden" id="articleContent" name="articleContent" />
    <input type="hidden" id="noteContent" name="noteContent" />
    <input type="hidden" id="articleTitle" name="articleTitle" />
    <input type="hidden" id="noteTitle" name="noteTitle" />
    <input type="hidden" id="urlContent" name="url" />

</form>
<div class="nest-header">
    <input id="inputArticleTitle" name="articleTitle" value="@Model.Articles[activeArticle].Title" style="margin-left:11%" />
    <button class="btn btn-open" data-modal-id="">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-globe" viewBox="0 0 16 16">
            <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm7.5-6.923c-.67.204-1.335.82-1.887 1.855A7.97 7.97 0 0 0 5.145 4H7.5V1.077zM4.09 4a9.267 9.267 0 0 1 .64-1.539 6.7 6.7 0 0 1 .597-.933A7.025 7.025 0 0 0 2.255 4H4.09zm-.582 3.5c.03-.877.138-1.718.312-2.5H1.674a6.958 6.958 0 0 0-.656 2.5h2.49zM4.847 5a12.5 12.5 0 0 0-.338 2.5H7.5V5H4.847zM8.5 5v2.5h2.99a12.495 12.495 0 0 0-.337-2.5H8.5zM4.51 8.5a12.5 12.5 0 0 0 .337 2.5H7.5V8.5H4.51zm3.99 0V11h2.653c.187-.765.306-1.608.338-2.5H8.5zM5.145 12c.138.386.295.744.468 1.068.552 1.035 1.218 1.65 1.887 1.855V12H5.145zm.182 2.472a6.696 6.696 0 0 1-.597-.933A9.268 9.268 0 0 1 4.09 12H2.255a7.024 7.024 0 0 0 3.072 2.472zM3.82 11a13.652 13.652 0 0 1-.312-2.5h-2.49c.062.89.291 1.733.656 2.5H3.82zm6.853 3.472A7.024 7.024 0 0 0 13.745 12H11.91a9.27 9.27 0 0 1-.64 1.539 6.688 6.688 0 0 1-.597.933zM8.5 12v2.923c.67-.204 1.335-.82 1.887-1.855.173-.324.33-.682.468-1.068H8.5zm3.68-1h2.146c.365-.767.594-1.61.656-2.5h-2.49a13.65 13.65 0 0 1-.312 2.5zm2.802-3.5a6.959 6.959 0 0 0-.656-2.5H12.18c.174.782.282 1.623.312 2.5h2.49zM11.27 2.461c.247.464.462.98.64 1.539h1.835a7.024 7.024 0 0 0-3.072-2.472c.218.284.418.598.597.933zM10.855 4a7.966 7.966 0 0 0-.468-1.068C9.835 1.897 9.17 1.282 8.5 1.077V4h2.355z" />
        </svg>
    </button>
    <input id="inputNoteTitle" name="noteTitle" value="@Model.Notes[activeNote].Title" style="margin-left:25%" />

</div>

@*Both article and nest editors
*@<div class="nest-container">
    <div class="article">
        <div id="article-editor" class="article-editor">
            @*later will be active int*@
            @Html.Raw(Model.Articles[activeArticle].Content)
        </div>
        <section class="modal hidden" id="modal">
            <div class="flex">
                <button class="btn-close">⨉</button>
            </div>
            <div style="text-align:center">
                <form method="post" action="/article/@Model.Id/@Model.Articles[activeArticle].Id/upload">
                    <label for="url">URL:</label>
                    <input type="text" id="inputUrl" name="url" value="@Model.Articles[activeArticle].Url" />
                    <input hidden name="articleTitle" value="@Model.Articles[activeArticle].Title" />
                    <button type="submit">Upload Article</button>
                </form>
            </div>
        </section>
        <div class="overlay hidden"></div>
    </div>
    <div class="notes">

        <div id="note-editor" class="notes-editor">
            @Html.Raw(Model.Notes[activeNote].Content)
        </div>
    </div>
</div>
@*Side Bar Element
*@<div class="sidebar sidebutton " id="sidebar">
    <div style="display:flex">
        <a href="#" class="dropdown-toggle" onclick="toggleDropdown('articles-dropdown')">Articles</a>
        <form method="post" action="/nest/@Model.Id/addarticle">
            <button type="submit" class="sidebutton"><img class="addimage" src="/images/kisspng-plus-and-minus-signs-computer-icons-plus-minus-sig-positive-vector-5adf8916e6f890.7023559515245990629461.png" width="44px" height="44px" /></button>
        </form>
    </div>
    <div class="dropdown" id="articles-dropdown">
        @for (int i = 0; i < Model.Articles.Count; i++)
        {
            <div style="display:flex">
                <form method="post" action="/nest/@Model.Id/activearticle">
                    <input type="hidden" name="articleIndex" value="@i">
                    <button type="submit" class="sidebutton" style="margin-left:10px;"> @Model.Articles[i].Title</button>
                </form>
                @if (Model.Articles.Count > 1)
                {
                    <form method="post" action="/nest/@Model.Id/deletearticle/@Model.Articles[i].Id">
                        <button class="sidebutton" type="submit"><img class="addimage" src="/images/TrashCan.png" width="24px" height="24px" /></button>
                    </form>
                }
            </div>
        }
    </div>
    <div style="display:flex">
        <a href="#" class="dropdown-toggle" onclick="toggleDropdown('notes-dropdown')">Notes</a>
        <form method="post" action="/nest/@Model.Id/addnote">
            <button type="submit" class="sidebutton"><img class="addimage" src="/images/kisspng-plus-and-minus-signs-computer-icons-plus-minus-sig-positive-vector-5adf8916e6f890.7023559515245990629461.png" width="44px" height="44px" /></button>
        </form>
    </div>
    <div class="dropdown" id="notes-dropdown">
        @for (int i = 0; i < Model.Notes.Count; i++)
        {
            <div style="display:flex">
                <form method="post" action="/nest/@Model.Id/activenote">
                    <input type="hidden" name="noteIndex" value="@i">
                    <button type="submit" class="sidebutton" style="margin-left:10px;"> @Model.Notes[i].Title</button>
                </form>
                @if (Model.Notes.Count > 1)
                {
                    <form method="post" action="/nest/@Model.Id/deletenote/@Model.Notes[i].Id">
                        <button class="sidebutton" type="submit"><img class="addimage" src="/images/TrashCan.png" width="24px" height="24px" /></button>
                    </form>
                }
            </div>
        }
    </div>
</div>



@*ChatBot pop up*@
<div id="popup" class="popup">
    <section class="msger">
        <div class="msger-header">
            <div class="msger-header-title">
                <img src="/images/InkOwl.png" width="64px" height="64" />
                <i class="fas fa-comment-alt"></i> InkOwl <small><small> powered by ChatGPT</small></small>
            </div>
            <div class="msger-header-options">
                <span><i class="fas fa-cog"></i></span>
            </div>
            <button id="closePopupButton" style="margin-top:30px; margin-right:20px;" class="btn-close">⨉</button>
        </div>
        <div class="msger-chat">
        </div>
        <form class="msger-inputarea">
            <input id="messageInput" type="text" class="msger-input" placeholder="Enter your query..." />
            <button id="sendButton" class="msger-send-btn">Send</button>
        </form>
    </section>
</div>
<button id="showPopupButton" class="inkowl" style=""><img src="/images/InkOwl.png" width="128px" height="128px" /></button>


<div style="display:flex; margin-top:10px;">
   

    <!-- Use an iframe to force the browser to reload the audio source -->
    <iframe id="audioIframe" style="display:none;"></iframe>
    <audio id="audioPlayer" controls>
        <source id="audioSource" src="/Home/GetAudio?nocache=@DateTime.Now.Ticks" type="audio/wav" />
        Your browser does not support the audio element.
    </audio>

    @using (Html.BeginForm("Speak", "Home", FormMethod.Post, new { id = "speakForm" }))
    {
        @Html.Hidden("nestId", Model.Id)
        <input type="hidden" name="text" id="TTS" />
        <div>
            <button type="submit" class="load-audio">Load Article Audio</button>
        </div>
    }
</div>


<style>
    .load-audio {
        background: #fff;
        color: #2F97C1;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 3px #ccc;
        transition: transform 100ms;
        margin-left: 10px;
        margin-top: 10px;
    }

    .load-audio:hover {
        transform: translateY(1px);
        box-shadow: 0 2px #ccc;
    }
</style>

<script>
    // Function to force the browser to reload the audio source
    function reloadAudio() {
        var audioIframe = document.getElementById("audioIframe");
        var audioSource = document.getElementById("audioSource");

        // Reload the audio source when the button is clicked
        audioSource.src = "/Home/GetAudio?" + new Date().getTime();
        audioIframe.src = audioSource.src;
    }
</script>





<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/js/ChatBotScript.js"></script>
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<script src="~/js/URLPopup.js"></script>

@*Making the quill editor*@
<script>
    var toolbarOptions = [
        ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
        ['blockquote', 'code-block'],

        [{ 'header': 1 }, { 'header': 2 }],               // custom button values
        [{ 'list': 'ordered' }, { 'list': 'bullet' }],
        [{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript
        [{ 'indent': '-1' }, { 'indent': '+1' }],          // outdent/indent
        [{ 'direction': 'rtl' }],                         // text direction

        [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

        [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
        [{ 'font': [] }],
        [{ 'align': [] }],

        ['clean']                                         // remove formatting button
    ];

  

        var quillArticle = new Quill('#article-editor', {
        modules: {
            toolbar: toolbarOptions
        },
        placeholder: 'Read an article...',
        theme: 'snow'// 'bubble'
    });
    var quillNote = new Quill('#note-editor', {
        modules: {
            toolbar: toolbarOptions
        },
        placeholder: 'Compose your thoughts...',
        theme: 'snow' //'bubble'
    });  

</script>

@*Updates form every 1/2 second*@
<script>

    function updateForm() {
        var articleContent = quillArticle.root.innerHTML;
        document.getElementById('articleContent').value = articleContent;

        var noteContent = quillNote.root.innerHTML;
        document.getElementById('noteContent').value = noteContent;

        var articleTitle = document.getElementById('inputArticleTitle').value;
        document.getElementById('articleTitle').value = articleTitle;

        var noteTitle = document.getElementById('inputNoteTitle').value;
        document.getElementById('noteTitle').value = noteTitle;

        var urlContent = document.getElementById('inputUrl').value;
        document.getElementById('urlContent').value = urlContent;

        var TextToSpeechContent = quillArticle.root.innerText;
        document.getElementById('TTS').value = TextToSpeechContent;
    }
    setInterval(updateForm, 500);

</script>

@*AutoSave*@
<script>
    // Function to perform auto-save
    function autoSave() {
        // Get form data

        var formData = {
            articleContent: document.getElementById("articleContent").value,
            noteContent: document.getElementById("noteContent").value,
            articleTitle: document.getElementById("articleTitle").value,
            noteTitle: document.getElementById("noteTitle").value,
            urlContent: document.getElementById("urlContent").value
        };
        // Use AJAX to send data to the server
        $.ajax({
            url: '/savenest/@Model.Id/@Model.Articles[activeArticle].Id/@Model.Notes[activeNote].Id',
            type: 'POST',
            data: JSON.stringify(formData),
            //async: true,
            contentType: 'application/json',
            success: function (response) {
                // Handle success
                console.log('Auto-save successful');
            },
            error: function (error) {
                // Handle errors
                console.error('Auto-save failed', error);
            }
        });
    }
    // Set up interval for auto-save
    setInterval(autoSave, 1000);
</script>

@*toggle Side bar*@
<script>
    function toggleSidebar() {
        var sidebar = document.getElementById('sidebar');
        sidebar.classList.toggle('show');
    }

    function toggleDropdown(dropdownId) {
        var dropdown = document.getElementById(dropdownId);
        dropdown.classList.toggle('show');
    }
</script>

@*ChatBot*@
<script>

    $(document).ready(function () {
        // Show the pop-up when needed
        $("#showPopupButton").click(function () {
            $("#popup").show();
        });

        // Hide the pop-up
        $("#closePopupButton").click(function () {
            $("#popup").hide();
        });
    });


    const imgBOT = "/images/bot.png";
    const imgPerson = "/images/user.png";
    const nameBOT = "InkOwl";
    const namePerson = "You";

    $(function () {
        addChatMessage(nameBOT, imgBOT, "right", "Hey! How may I help you?");

        $('#sendButton').click(function () {
            var message = $('#messageInput').val();
            askChatGPT(message);
            $('#messageInput').val('');
            return false;
        });

        function askChatGPT(message) {
            addChatMessage(namePerson, imgPerson, "left", message);

            $.ajax({
                url: '/AskChatGPT',  /*!import*/
                type: 'POST',
                data: JSON.stringify(message),
                async: true,
                contentType: 'application/json',
                success: function (response) {
                    addChatMessage(nameBOT, imgBOT, "right", response.data);
                    $('.imgLoader').hide();
                }
            });
        }

        function addChatMessage(name, img, side, text) {
            const msgHTML = `
                                        <div class="msg ${side}-msg">


                                            <div class="msg-bubble">
                                            <div class="msg-info">
                                                <div class="msg-info-name">${name}</div>
                                                <div class="msg-info-time">${formatDate(new Date())}</div>
                                            </div>

                                            <div class="msg-text">${text}</div>
                                            </div>
                                        </div>
                                        `;

            $(".msger-chat").append($(msgHTML));

            if (side == "left") {
                var loaderHTML = `<div id="dvLoader"><img class="imgLoader"  /></div>`;
                $(".msger-chat").append($(loaderHTML));
            }

            $(".msger-chat").scrollTop($(".msger-chat").scrollTop() + 500);

            return false;
        }

        function formatDate(date) {
            const h = "0" + date.getHours();
            const m = "0" + date.getMinutes();

            return `${h.slice(-2)}:${m.slice(-2)}`;
        }
    });
</script>

